import os
import re
import shutil
from pathlib import Path

def move_files(path: Path):
    paths = path.glob("*_files/*")
    dest_base = Path("public")
    for path in paths:
        if path.name == "libs":
            dest_dir = dest_base / "libs"
            lib_files = path.glob("*")
            for dependency in lib_files: # [analysis/r_files/libs/jquery-1.11.1]
                dest = os.path.join(dest_dir, dependency.name) # public/libs/jquery-1.11.1
                if not os.path.isdir(dest):
                    shutil.move(dependency, dest)
            shutil.rmtree(path.parent)
        else:
            new_path = path.parent /  path.name
            parts = path.parts
            dest = dest_base / parts[-3] / parts[-2] / parts[-1]
            if os.path.isdir(dest):
                shutil.rmtree(dest)
            shutil.move(new_path, dest)
            shutil.rmtree(path.parent)

def process_line(line: str, prefix):
    match  =  re.match(r"^(<script|<link|<img).+?>", line)
    if match is None:
        return line

    type = re.match(r"^<\w+", line).group(0).strip("<").strip(" ")
    if type == "script":
       return replace_link(line, "src", prefix)

    elif type == "link":
        return replace_link(line, "href", prefix)

    elif type == "img":
        return replace_link(line, "src", prefix)


def replace_link(line, attr, prefix):
    match = re.search(r'{attr}="(.*?)"'.format(attr=attr), line)
    if match :
        attr_val = match.group(1)
        if not attr_val.startswith("http"):
            if "libs" in attr_val:
                libs_idx = attr_val.find("libs")
                libs_idx = libs_idx + len("libs")
                line_replaced = re.sub(r'{attr}="(.*?)"'.format(attr=attr), r'{attr}="/libs{after}"'.format(attr=attr,after=attr_val[libs_idx:]), line)
            else:
                line_replaced = re.sub(r'{attr}="(.*?)"'.format(attr=attr), r'{attr}="/{prefix}/\1"'.format(attr=attr, prefix=prefix), line)

            return line_replaced

    return line


output_dir = "src/content" if os.getenv("QUARTO_PROJECT_OUTPUT_DIR") is None else os.getenv("QUARTO_PROJECT_OUTPUT_DIR")

move_files(Path(output_dir, "analysis"))
move_files(Path(output_dir, "data"))
# move reamining html dependencies generated by usage of htmlwidgets
move_files(Path("data"))
move_files(Path("analysis"))

if os.getenv("QUARTO_PROJECT_OUTPUT_FILES") is not None:
    output_files = os.getenv("QUARTO_PROJECT_OUTPUT_FILES").split("\n")
    for file in output_files:
        path = Path(file)
        prefix = path.parts[2]
        with path.open(mode="r+") as f:
            lines_replaced = [process_line(line, prefix) for line in f]
            f.seek(0)
            f.writelines(lines_replaced)
            f.truncate()
